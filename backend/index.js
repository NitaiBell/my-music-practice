import express from "express";
import dotenv from "dotenv";
import cors from "cors";

import userRoutes from "./routes/userRoutes.js";
import practiceRoutes from "./routes/practiceRoutes.js";
import teacherStudentRoutes from "./routes/teacherStudentRoutes.js";
import courseProgressRoutes from "./routes/courseProgressRoutes.js";
import articleReadsRoutes from "./routes/articleReadsRoutes.js";
import passwordRoutes from "./routes/passwordRoutes.js"; // ‚úÖ NEW

import { pool } from "./db.js";
import {
  createUsersTableIfNotExists,
  createPracticeLogTableIfNotExists,
  createTeacherStudentTableIfNotExists,
  createUserCourseProgressTable,
  createUserArticleReadsTable,
  createOneTimePasswordsTable, // ‚úÖ NEW
} from "./initDb.js";


// üß© 1. Load correct environment file dynamically
const envFile =
  process.env.NODE_ENV === "production"
    ? ".env.production"
    : ".env.development";

dotenv.config({ path: envFile });

console.log(`‚úÖ Loaded ${envFile}`);
console.log(`üåç NODE_ENV = ${process.env.NODE_ENV}`);
console.log(`üíæ DATABASE_URL = ${process.env.DATABASE_URL}`);
console.log(`üöÄ PORT = ${process.env.PORT || 5000}`);


// üß© 2. Initialize Express
const app = express();
const port = process.env.PORT || 5000;


// üß© 3. Middleware
app.use(cors());
app.use(express.json({ limit: "5mb" }));
app.use(express.urlencoded({ limit: "5mb", extended: true }));


// üß© 4. Test route
app.get("/", async (req, res) => {
  try {
    const result = await pool.query("SELECT NOW()");
    res.json({
      message: "‚úÖ Server is running!",
      time: result.rows[0],
      env: process.env.NODE_ENV,
    });
  } catch (err) {
    console.error("‚ùå Database test failed:", err.message);
    res.status(500).json({ error: err.message });
  }
});


// üß© 5. API Routes
app.use("/api/users", userRoutes);
app.use("/api/practice", practiceRoutes);
app.use("/api/teacher-student", teacherStudentRoutes);
app.use("/api/course-progress", courseProgressRoutes);
app.use("/api/article-reads", articleReadsRoutes);
app.use("/api", passwordRoutes); // ‚úÖ NEW route


// üß© 6. Start server after ensuring DB tables exist (with correct order)
(async () => {
  try {
    console.log("üß± Initializing database tables...");

    await createUsersTableIfNotExists();            // ◊ó◊ô◊ô◊ë ◊®◊ê◊©◊ï◊ü
    await createPracticeLogTableIfNotExists();
    await createTeacherStudentTableIfNotExists();
    await createUserCourseProgressTable();          // ◊™◊ú◊ï◊ô ◊ë-users
    await createUserArticleReadsTable();            // ◊™◊ú◊ï◊ô ◊ë-users
    await createOneTimePasswordsTable();

    console.log("‚úÖ All tables initialized successfully!");

    app.listen(port, () => {
      console.log(`‚úÖ Server running on port ${port} (${process.env.NODE_ENV})`);
    });
  } catch (err) {
    console.error("‚ùå Failed to initialize tables:", err.message);
    process.exit(1);
  }
})();
